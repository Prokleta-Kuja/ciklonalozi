@page "/nalog/{id}"
@using ciklonalozi.Pages
@model Qr

<!DOCTYPE html>
<html lang="hr">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ciklo-Sport Nalog</title>
    <link rel="stylesheet" href="/css/bootstrap-night.min.css" />
    <link rel="stylesheet" href="/css/bootstrap-icons.min.css" />
    <link href="/css/site.css" rel="stylesheet" />
    <link rel="stylesheet" href="./Qr.cshtml.css" />
    <link rel="stylesheet" href="/css/Qr.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/icons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/icons/favicon-16x16.png">
    <link rel="manifest" href="/icons/site.webmanifest">
    <link rel="mask-icon" href="/icons/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="shortcut icon" href="/icons/favicon.ico">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-config" content="/icons/browserconfig.xml">
    <meta name="theme-color" content="#ffffff">
</head>

<body class="container-sm">

    @* Ovo se prikazuje ako korisnik ne želi primati obavijesti *@
    <div id=denied class="d-none" role="alert">
        Slanje obavijesti je blokirano na Vašem uređaju. Ako se odlučite primati obavijesti, omogućite slanje obavijesti
        u svom pregledniku i probajte ponovo.
    </div>

    @if (Model.Fail)
    {
        @* Upisan je neispravan nalog *@
        <h1>Radni nalog nije pronađen.</h1>
        <hr>
        <p>Provjerite jeste li upisali ispravan URL.</p>
        <p>Ako je upisan ispravan URL, a i dalje se ne prikazuje status naloga, kontaktirajte nas</p>
        <p>telefonom na: <a href="tel:+38517888860">+385 1 788 8860</a></p>
        <p>ili mailom na: <a href="mailto:info@ciklo-sport.hr">info@ciklo-sport.hr</a></p>
    }
    else if (Model.Order == null)
    {
        @* Dekodirano je kako treba ali nalog nije pronađen. Ne bi se nikad smjelo dogoditi *@
        <h1>O-ooo, ovo se nije trebalo dogoditi.</h1>
        <h3>Radimo na otklanjanju problema.</h3>
    }
    else
    {
        @* Tu je sve ok i koristi Model.Order po uzoru na Print.cshtml *@

        if (Model.Order.Returned.HasValue)
        {
            <div class="p-2 d-flex flex-row flex-wrap justify-content-between align-items-center bg-black">
                <img class="logo-header" src="/images/cs-logo-white.svg" alt="Logo" />
                <h1 class="text-center fs-4 m-0">Radni nalog br.: @Model.Order.OrderId</h1>
                <div class="d-flex flex-nowrap flex-row align-items-center status-header">
                    <h2 class="fs-6 pe-2 m-0">STATUS:</h2><button type="button"
                        class="btn btn-info fs-6 text-white">ZATVORENO</button>
                </div>
            </div>

            <div class="m-3">
                <h1>Pozdrav @Model.Order.ContactName,</h1>
            </div>

            <div class="ms-5 me-5">
                <p>Predmet "@Model.Order.Subject" je preuzet sa servisa dana: @Model.Order.Returned sati.</p>

                <p>Odrađeni su radovi: "@Model.Order.Description" s danom @Model.Order.Completed sati.</p>

                @if (Model.Order.RealPrice.HasValue)
                {
                    <p>Plaćen iznos radova: @Model.Order.RealPrice €</p>
                }

                <p>Hvala Vam na podršci.</p>

                <p>Želimo Vam ugodnu vožnju i puno sretnih kilometara!</p>
            </div>

        }

        else if (Model.Order.Completed.HasValue)
        {
            <div class="p-2 d-flex flex-row flex-wrap justify-content-between align-items-center bg-black">
                <img class="logo-header" src="/images/cs-logo-white.svg" alt="Logo" />
                <h1 class="text-center fs-4 m-0">Radni nalog br.: @Model.Order.OrderId</h1>
                <div class="d-flex flex-nowrap flex-row align-items-center status-header">
                    <h2 class="fs-6 pe-2 m-0">STATUS:</h2><button type="button"
                        class="btn btn-success fs-6 text-white">ZAVRŠENO</button>
                </div>
            </div>

            <div class="m-3">
                <h1>Pozdrav @Model.Order.ContactName,</h1>
            </div>

            <div class="ms-5 me-5">
                <p>Dogovoreni radovi ("@Model.Order.Description") na predmetu "@Model.Order.Subject" su uspješno završeni
                    @Model.Order.Completed sati.</p>

                @if (Model.Order.RealPrice.HasValue)
                {
                    <p>Konačan iznos radova: @Model.Order.RealPrice €</p>
                }

                <p>Možete doći po bicikl.</p>

                <p>Zahvaljujemo Vam na ukazanom povjerenju.</p>
            </div>

        }

        else if (Model.Order.Arrived.HasValue)
        {
            <div class="p-2 d-flex flex-row flex-wrap justify-content-between align-items-center bg-black">
                <img class="logo-header" src="/images/cs-logo-white.svg" alt="Logo" />
                <h1 class="text-center fs-4 m-0">Radni nalog br.: @Model.Order.OrderId</h1>
                <div class="d-flex flex-nowrap flex-row align-items-center status-header">
                    <h2 class="fs-6 pe-2 m-0">STATUS:</h2><button type="button"
                        class="btn btn-warning fs-6 text-white">ZAPRIMLJENO - U RADU</button>
                </div>
            </div>

            <div class="m-3">
                <h1>Pozdrav @Model.Order.ContactName,</h1>
            </div>

            <div class="ms-5 me-5">
                <p>Predmet "@Model.Order.Subject" je dostavljen @Model.Order.Arrived sati te je u procesu servisiranja.</p>
                <p>Dogovoreni radovi: @Model.Order.Description</p>

                @if (Model.Order.EstimatedPrice.HasValue)
                {
                    <p>Okvirna procjena iznosa radova: ~ @Model.Order.EstimatedPrice €</p>
                }

                <p>Procijenjeno vrijeme završetka radova: @Model.Order.Arrival.AddHours(1) sati.</p>

                <p>Provjerite status naloga ponovo kasnije.</p>
            </div>
        }

        else
        {
            <div class="p-2 d-flex flex-row flex-wrap justify-content-between align-items-center bg-black">
                <img class="logo-header" src="/images/cs-logo-white.svg" alt="Logo" />
                <h1 class="text-center fs-4 m-0">Radni nalog br.: @Model.Order.OrderId</h1>
                <div class="d-flex flex-nowrap flex-row align-items-center status-header">
                    <h2 class="fs-6 pe-2 m-0">STATUS:</h2><button type="button" class="btn btn-danger fs-6">NIJE
                        ZAPRIMLJENO</button>
                </div>
            </div>

            <div class="m-3">
                <h1>Pozdrav @Model.Order.ContactName,</h1>
            </div>

            <div class="ms-5 me-5">
                <p>Vaš predmet "@Model.Order.Subject" još nije preuzet na servis. Dogovoreno vrijeme i datum preuzimanja je
                    najkasnije do: @Model.Order.Arrival.AddHours(-6) sati.</p>
                <p>Dogovoreni radovi koji će se obavljati: @Model.Order.Description</p>

                @if (Model.Order.EstimatedPrice.HasValue)
                {
                    <p>Okvirna procjena iznosa radova: ~ @Model.Order.EstimatedPrice €</p>
                }

                <p>Hvala Vam na ukazanom povjerenju i vidimo se uskoro!</p>
            </div>
        }

        <hr class="m-0">
        <div class="m-1">
            <div class="d-lg-flex flex-row flex-wrap flex-lg-nowrap align-items-center justify-content-around">
                <div class="text-secondary d-flex flex-column justify-content-between p-2 footer-wo-width">
                    <div class="d-flex flex-row justify-content-between">
                        <h3>Radno vrijeme:</h3>
                    </div>
                    <div class="d-flex flex-row justify-content-between">
                        <p>Ponedjeljak - Petak:</p>
                        <p>08:00 - 20:00</p>
                    </div>
                    <div class="d-flex flex-row justify-content-between">
                        <p>Subotom:</p>
                        <p>09:00 - 14:00</p>
                    </div>
                    <div class="d-flex flex-row justify-content-between">
                        <p>Nedjeljom i blagdanima:</p>
                        <p>Zatvoreno</p>
                    </div>
                </div>
                <div class="p-2">
                    <p class="text-secondary text-center">Podržite nas i na društvenim mrežama:</p>
                    <div class="d-flex flex-row align-items-center justify-content-around">
                        <div class="ms-3">
                            <a class="rounded text-secondary" href="https://www.facebook.com/ciklosport" role="button"
                                target="_blank"><i class="bi bi-facebook fs-3"></i>
                            </a>
                        </div>
                        <div class="ms-3">
                            <a class="rounded text-secondary" href="https://www.instagram.com/ciklosport/" role="button"
                                target="_blank"><i class="bi bi-instagram fs-3"></i>
                            </a>
                        </div>
                        <div class="ms-3">
                            <a class="rounded text-secondary" href="https://twitter.com/ciklo_sport/" role="button"
                                target="_blank"><i class="bi bi-twitter fs-3"></i>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="p-2">
                    <p class="text-secondary text-center">Posjetite i našu web stranicu: <a href="https://ciklo-sport.hr/"
                            target="_blank">ciklo-sport.hr</a></p>
                    <div class="text-center">
                        <a href="https://ciklo-sport.hr/" target="_blank"><img class="footer-logo" src="/images/cs-300.png"
                                alt="Ciklo-Sport" /></a>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Ovo se prikazuje ako je korisnik prihvatio primanje obavijesti ali ne za ovaj nalog *@
    <div id=granted class="d-none">
        <button onclick="subscribe()">Primajte obavijesti i za ovaj servis</button>
    </div>

    @* Ovo se prikazuje ako je korisnik prihvatio primanje obavijesti za ovaj nalog *@
    <div id=granted-subscribed class="d-none">
        Primiti ćete obavijest kada servis bude završen.
        <button onclick="unsubscribe()">Otkaži</button>
    </div>

    @* Ovo se prikazuje ako možemo pitati da li želi primanje obavijesti *@
    <div id=default class="d-none">
        <button class="btn btn-success" onclick="subscribe()">Primite obavijest kada servis bude završen.</button>
    </div>

    @* Ovo se prikazuje kada nešto ode u klinac. Bitno je da korisnik zna da neće dobiti obavijest *@
    <div id=error class="d-none">
        Nažalost Vas nismo mogli zabilježiti za primanje obavijesti. Probajte ponovo kasnije, a ako i dalje ne radi nas
        informirajte kako bi mogli istražiti.
    </div>

    @* Ovo ne diraj *@
    <form id=subform action="" method="post" class=d-none>
        <input id=e name=e>
        <input id=p name=p>
        <input id=a name=a>
        @Html.AntiForgeryToken()
        <button type="submit"></button>
    </form>

    <script src="/js/bootstrap.min.js"></script>
    <script>
        var registration;
        const loaded = @(Model.Order == null ? "false" : "true");
        const subscribed = @Model.Order?.CanPush.ToString().ToLower();
        (async () => {
            if (!loaded) {
                return;
            }

            if (!("Notification" in window)) {
                return;
            }

            if (!('PushManager' in window)) {
                return;
            }

            if (!('serviceWorker' in navigator)) {
                return false;
            }

            registration = await navigator.serviceWorker.register("/js/push-handler.js");
            registration.update();

            if (!(registration.showNotification)) {
                return;
            }

            if (Notification.permission == 'granted') {
                if (subscribed)
                    document.getElementById('granted-subscribed').className = "d-block";
                else
                    document.getElementById('granted').className = "d-block";
            }
            else if (Notification.permission == 'denied') {
                document.getElementById('denied').className = "d-block alert alert-danger";
            }
            else {
                document.getElementById('default').className = "d-block";
            }
        })();

        const saveSubscription = async (subscription) => {
            if (subscription) {
                let sub = getWebPushSubscriptionObject(subscription);

                document.getElementById('e').value = sub.endpoint;
                document.getElementById('p').value = sub.p256DH;
                document.getElementById('a').value = sub.auth;

                document.getElementById("subform").submit();
            }
            else {
                subscribe();
                document.getElementById('error').className = "d-block";
            }
        }

        const unsubscribe = async () => {
            let subscription = await registration.pushManager.getSubscription();
            if (subscription)
                await subscription.unsubscribe();

            document.getElementById("subform").submit();
        }

        const subscribe = async () => {
            let permission = await Notification.requestPermission();

            if (permission !== 'granted') {
                window.location.href = window.location.href
                return;
            }

            let subscription = await registration.pushManager.getSubscription();

            if (subscription) {
                saveSubscription(subscription);
            }

            var subscribeParams = { userVisibleOnly: true };
            subscribeParams.applicationServerKey = urlB64ToUint8Array('@ciklonalozi.C.Vapid.Current.PublicKey');

            subscription = await registration.pushManager.subscribe(subscribeParams);
            saveSubscription(subscription);
        }

        const getWebPushSubscriptionObject = (subscription) => {
            return {
                endpoint: subscription.endpoint,
                p256DH: base64Encode(subscription.getKey('p256dh')),
                auth: base64Encode(subscription.getKey('auth'))
            };
        }

        const urlB64ToUint8Array = (base64String) => {
            var padding = '='.repeat((4 - base64String.length % 4) % 4);
            var base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');

            var rawData = window.atob(base64);
            var outputArray = new Uint8Array(rawData.length);

            for (var i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

        const base64Encode = (arrayBuffer) => {
            return btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));
        }
    </script>
</body>

</html>