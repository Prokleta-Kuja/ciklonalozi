
  <div class="mb-3 form-check">
    <input type="checkbox" class="form-check-input @_errorClass" id=@For @bind=@Value
        @onblur=Update required=@Required>
    <label class="form-check-label" for=@For>@Label @(Required ? "*":"")</label>
    @if (_isError)
    {
        <div class="invalid-feedback">
            @Errors![For]
        </div>
    }
  </div>

  @code{
    private bool _isError => Errors != null && Errors.ContainsKey(For);
    private string _errorClass => _isError ? "is-invalid" : string.Empty;
    [Parameter] public string For { get; set; } = null!;
    [Parameter] public string Label { get; set; } = null!;
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public Dictionary<string, string>? Errors { get; set; }
    private async Task Update()
    {
        if (_isError)
            Errors!.Remove(For);

        if (!ValueChanged.HasDelegate)
            return;

        await ValueChanged.InvokeAsync(Value);
    }
  }